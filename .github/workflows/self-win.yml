name: Windows.

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.sh'
      - 'Telegram/Telegram.plist'
  workflow_dispatch:
    inputs:
      buildCommit:
        description: 'Commit for building. Default it latest on branch'
        required: false
        type: string
        default: ''

jobs:
#   start_aws: # The type of runner that the job will run on
#     runs-on: ubuntu-latest
    
#     # Below this are each of the steps that are run
#     steps:
    
#       # Name of step
#       - name: Start AWS EC2
#         # Run AWS Command on the GitHub Hosted runner which starts the instance using AWS authentication stored in GitHub Secrets (see below how to add)
#         run: |
#           aws ec2 start-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  windows:
#     needs: start_aws
    name: Windows
    runs-on: self-hosted
    continue-on-error: true

    strategy:
      matrix:
        arch: [x64]

    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      PREPARE_PATH: "Telegram/build/prepare/prepare.py"
      PreferredToolArchitecture: "x64"
      ARTIFACT_NAME: "PTelegram_Win"

    defaults:
      run:
        shell: cmd

    steps:
      - name: Prepare directories.
        run: |
          echo TBUILD=%GITHUB_WORKSPACE%\TBuild>>%GITHUB_ENV%
      - name: Clone.
        uses: actions/checkout@v3.1.0
        if: github.event.inputs.buildCommit == ''
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\tdesktop
          
      - uses: ilammy/msvc-dev-cmd@v1.12.0
        name: Native Tools Command Prompt.
        with:
          arch: ${{ matrix.arch }}
          
      - name: Setup NASM.
        uses: ilammy/setup-nasm@v1

      - name: Clone with checkout.
        uses: actions/checkout@v3.1.0
        if: github.event.inputs.buildCommit != ''
        with:
          submodules: recursive
          path: ${{ env.TBUILD }}\tdesktop
          ref: ${{ github.event.inputs.buildCommit }}

      - name: Libraries.
        env:
          GYP_MSVS_OVERRIDE_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\'
          GYP_MSVS_VERSION: 2022
        run: '%TBUILD%\tdesktop\Telegram\build\prepare\win.bat silent'

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd %TBUILD%\tdesktop\Telegram
          call configure.bat ^
          ${{ matrix.arch }} ^
          -D TDESKTOP_API_TEST=OFF ^
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} ^
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }} ^
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF ^
          -D DESKTOP_APP_NO_PDB=ON ^
          -DCMAKE_SYSTEM_VERSION=%SDK%
          cd ..\out
          msbuild -m Telegram.sln /p:Configuration=Release,Platform=${{ matrix.arch }}
      - name: Move and hash artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          mkdir artifact
          move %TBUILD%\tdesktop\out\Release\Telegram.exe artifact/Telegram_${{ matrix.arch }}.exe
          certutil -hashfile artifact/Telegram_${{ matrix.arch }}.exe SHA256 | find /i /v "SHA256" | find /i /v "CertUtil" > artifact/Telegram_${{ matrix.arch }}_sha256.txt
      - uses: actions/upload-artifact@master
        name: Upload artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact\
  
#   stop_aws:
#     needs: [start_aws, windows]
#     runs-on: ubuntu-latest
    
#     # Below this are each of the steps that are run
#     steps:
    
#       # Name of step
#       - name: Stop AWS EC2
#         # Run AWS Command on the GitHub Hosted runner which stops the instance using AWS authentication stored in GitHub Secrets (see below how to add)
#         run: |
#           aws ec2 stop-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
